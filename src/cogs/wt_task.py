import random
from datetime import datetime, timedelta, timezone

import discord
from discord.ext import commands, tasks

from libs.utils import get_stock_price, get_trivia, get_weather, get_what_today


class WTTasks(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.index = 0
        self.bot = bot
        self.printer.start()

    def cog_unload(self):
        self.printer.cancel()

    @tasks.loop(seconds=600.0)
    async def printer(self):
        channel = self.bot.get_channel(int("762575939623452682"))

        # „Çø„Ç§„É†„Çæ„Éº„É≥„ÅÆÁîüÊàê
        JST = timezone(timedelta(hours=+9), "JST")
        today = datetime.now(JST)

        this_month = today.month
        this_day = today.day
        this_hour = today.hour
        this_minute = today.minute

        if this_hour == 7 and 0 <= this_minute <= 9:
            result = get_what_today(this_month, this_day)

            # Êù±‰∫¨Âú∞Êñπ„ÅÆÂ§©Ê∞ó„ÇíÂèñÂæó„ÄÇcitycode‰∏ÄË¶ß "https://weather.tsukumijima.net/primary_area.xml"
            citycode = 130010
            weather = get_weather(citycode)

            # ChatGPT„ÅßÈõëÂ≠¶„ÇíÂèñÂæó
            trivia = await get_trivia()
            good_morning = random.choice(["„Åä„Åñ„Åó„ÄÇ", "„Åä„Åñ„Åô„ÄÇ", "„Åä„ÄÇ", "„Åä„ÅØ„Çà„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ"])

            # USD/JPY
            ticker_symbol = "USDJPY=X"
            usd_jpy_day_before_ratio, usd_jpy_stock_today = get_stock_price(ticker_symbol)

            # Êó•ÁµåÂπ≥Âùá
            ticker_symbol = "^N225"
            nikkei_day_before_ratio, nikkei_stock_today = get_stock_price(ticker_symbol)

            # S&P500
            ticker_symbol = "^GSPC"
            sp500_day_before_ratio, sp500_stock_today = get_stock_price(ticker_symbol)

            # NASDAQ
            ticker_symbol = "^IXIC"
            nasdaq_day_before_ratio, nasdaq_stock_today = get_stock_price(ticker_symbol)

            market_text = f"- **USD/JPY:** {round(usd_jpy_stock_today, 1):,}ÂÜÜ ({usd_jpy_day_before_ratio})\n- **Êó•Áµå225:** {round(nikkei_stock_today, 1):,}ÂÜÜ ({nikkei_day_before_ratio})\n- **S&P500:** {round(sp500_stock_today, 1):,}pt ({sp500_day_before_ratio})\n- **NASDAQ:** {round(nasdaq_stock_today, 1):,}pt ({nasdaq_day_before_ratio})\n‚Äª()ÂÜÖ„ÅØÂâçÊó•ÊØî„ÄÇ"  # noqa: E501

            embed = discord.Embed()
            embed.color = discord.Color.green()
            embed.title = f"{good_morning}{this_month}Êúà{this_day}Êó• Êúù„ÅÆ7ÊôÇ„Åß„Åô„ÄÇ"
            embed.description = f"### üí° ‰ªäÊó•„ÅØ„Å™„Çì„ÅÆÊó•Ôºü\n{result}\n### üìö ‰ªäÊó•„ÅÆÈõëÂ≠¶\n{trivia}\n(Powered by [gpt-4-1106-preview](https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo))\n### üíπ Áõ∏Â†¥\n{market_text}\n### ‚õÖ Â§©Ê∞ó\n{weather}"  # noqa: E501
            await channel.send(embed=embed)

    # „Éá„Éó„É≠„Ç§ÂæåBot„ÅåÂÆåÂÖ®„Å´Ëµ∑Âãï„Åó„Å¶„Åã„Çâ„Çø„Çπ„ÇØ„ÇíÂõû„Åô
    @printer.before_loop
    async def before_printer(self):
        print("waiting until bot booting")
        await self.bot.wait_until_ready()


async def setup(bot: commands.Bot):
    await bot.add_cog(WTTasks(bot))
